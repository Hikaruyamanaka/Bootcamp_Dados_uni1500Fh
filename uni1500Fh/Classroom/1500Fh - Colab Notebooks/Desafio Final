{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPZOMYCJ9Xnx5VzORZ8jMow"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":7,"metadata":{"id":"X2_23Fs21jk5","executionInfo":{"status":"ok","timestamp":1665170909831,"user_tz":180,"elapsed":252,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}}},"outputs":[],"source":["# Vamos importar algumas bibliotecas\n","import pandas as pd\n","import numpy as np\n","import matplotlib.pyplot as plt\n","%matplotlib inline"]},{"cell_type":"code","source":["# Vamos importar nosso arquivo csv com os dados\n","# Lembre-se: O arquivo csv deve estar no colab\n","\n","file = '/content/Final Dados_Desafio_Previsao_Vendas.csv'\n","df = pd.read_csv(file, parse_dates = True)\n","\n","df.head"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HL5Nou_Y3hRA","executionInfo":{"status":"ok","timestamp":1665171290218,"user_tz":180,"elapsed":2,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}},"outputId":"bcd2ec78-8dd9-47da-ef2e-1eaef2ff1ed8"},"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<bound method NDFrame.head of        VENDEDOR  CLIENTE  PRODUTO  QUANTIDADE UNIDADE_MEDIDA_NF   PREÇO_NF  \\\n","0           380    38797      254       30155               KGS     10,795   \n","1           379    36022      963       13149               KGS       5,78   \n","2           385    23397     1158        4602               KGS       11,3   \n","3           422    15430      112       13850               KGS      3,926   \n","4           380     6319       69        5347               KGS      44,39   \n","...         ...      ...      ...         ...               ...        ...   \n","16685       318    23353      256        1753               KGS  245,83806   \n","16686       318    23353      256        2103               KGS  218,57511   \n","16687       318    23353      256        2103               KGS  233,59089   \n","16688       318    23353      256        1753               KGS  257,11803   \n","16689       318    23353      256        1753               KGS  264,10605   \n","\n","         DATA_NF CRP_AJUSTADO VLR_PRECO_LISTA VLR_CONTRIBUICAO  \n","0      6/19/2010         5,29           12,88         166.092   \n","1      5/23/2010         3,32            6,06          32.362   \n","2       3/8/2010         7,87           14,40          15.771   \n","3      4/26/2010         3,91            7,15             197   \n","4      8/24/2009         4,11           10,01         215.380   \n","...          ...          ...             ...              ...  \n","16685   6/3/2010        50,27          168,77         342.834   \n","16686  10/2/2010        47,81          175,10         359.110   \n","16687   9/3/2010        55,75          187,16         373.993   \n","16688   7/2/2010        52,58          176,50         358.551   \n","16689   8/1/2010        54,01          181,31         368.304   \n","\n","[16690 rows x 10 columns]>"]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NuN918F06rno","executionInfo":{"status":"ok","timestamp":1665171809028,"user_tz":180,"elapsed":311,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}},"outputId":"e3fcb011-2979-40a0-ff01-6d1d778fbb95"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 16690 entries, 0 to 16689\n","Data columns (total 10 columns):\n"," #   Column             Non-Null Count  Dtype  \n","---  ------             --------------  -----  \n"," 0   VENDEDOR           16690 non-null  int64  \n"," 1   CLIENTE            16690 non-null  int64  \n"," 2   PRODUTO            16690 non-null  int64  \n"," 3   QUANTIDADE         16690 non-null  float64\n"," 4   UNIDADE_MEDIDA_NF  16690 non-null  object \n"," 5   PREÇO_NF           16690 non-null  object \n"," 6   DATA_NF            16690 non-null  object \n"," 7   CRP_AJUSTADO       16690 non-null  object \n"," 8   VLR_PRECO_LISTA    16690 non-null  object \n"," 9   VLR_CONTRIBUICAO   16690 non-null  object \n","dtypes: float64(1), int64(3), object(6)\n","memory usage: 1.3+ MB\n"]}]},{"cell_type":"code","source":["# Algumas informações estatísticas sobre as vendas\n","\n","df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"-yGBrroC5JSn","executionInfo":{"status":"ok","timestamp":1665171770237,"user_tz":180,"elapsed":340,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}},"outputId":"24f7a058-8968-494d-ceaa-56b5156c4ff6"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["           VENDEDOR       CLIENTE       PRODUTO    QUANTIDADE\n","count  16690.000000  16690.000000  16690.000000  16690.000000\n","mean     354.920132  21781.291072    353.885321   1498.689455\n","std       42.349895  10531.812495    470.760665   3105.141894\n","min       47.000000     13.000000      1.000000      0.000000\n","25%      324.000000  12748.000000     60.000000    219.000000\n","50%      335.000000  23390.000000    121.000000    525.000000\n","75%      389.000000  30531.000000    411.000000   1446.000000\n","max      445.000000  39214.000000   1649.000000  53630.000000"],"text/html":["\n","  <div id=\"df-042b505e-108e-46f7-917d-eb248e0763ed\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>VENDEDOR</th>\n","      <th>CLIENTE</th>\n","      <th>PRODUTO</th>\n","      <th>QUANTIDADE</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>16690.000000</td>\n","      <td>16690.000000</td>\n","      <td>16690.000000</td>\n","      <td>16690.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>354.920132</td>\n","      <td>21781.291072</td>\n","      <td>353.885321</td>\n","      <td>1498.689455</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>42.349895</td>\n","      <td>10531.812495</td>\n","      <td>470.760665</td>\n","      <td>3105.141894</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>47.000000</td>\n","      <td>13.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>324.000000</td>\n","      <td>12748.000000</td>\n","      <td>60.000000</td>\n","      <td>219.000000</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>335.000000</td>\n","      <td>23390.000000</td>\n","      <td>121.000000</td>\n","      <td>525.000000</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>389.000000</td>\n","      <td>30531.000000</td>\n","      <td>411.000000</td>\n","      <td>1446.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>445.000000</td>\n","      <td>39214.000000</td>\n","      <td>1649.000000</td>\n","      <td>53630.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-042b505e-108e-46f7-917d-eb248e0763ed')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-042b505e-108e-46f7-917d-eb248e0763ed button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-042b505e-108e-46f7-917d-eb248e0763ed');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Mudando o tipo para float da coluna 'PRODUTO'\n","\n","df['VLR_PRECO_LISTA'] = df['VLR_PRECO_LISTA'].astype(float)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":345},"id":"k_vnlLw65JUq","executionInfo":{"status":"error","timestamp":1665171774097,"user_tz":180,"elapsed":237,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}},"outputId":"07bc9022-7329-4f2c-d83b-8887b6ba9c04"},"execution_count":28,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-28-da594f45682e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Mudando o tipo para float da coluna 'PRODUTO'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'VLR_PRECO_LISTA'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'VLR_PRECO_LISTA'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfloat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   5813\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5814\u001b[0m             \u001b[0;31m# else, only a single dtype is given\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5815\u001b[0;31m             \u001b[0mnew_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mgr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5816\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_constructor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__finalize__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5817\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    416\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbool\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"raise\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0mT\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"astype\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m     def convert(\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/managers.py\u001b[0m in \u001b[0;36mapply\u001b[0;34m(self, f, align_keys, ignore_failures, **kwargs)\u001b[0m\n\u001b[1;32m    325\u001b[0m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    326\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 327\u001b[0;31m                     \u001b[0mapplied\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    328\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mTypeError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mNotImplementedError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    329\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mignore_failures\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/internals/blocks.py\u001b[0m in \u001b[0;36mastype\u001b[0;34m(self, dtype, copy, errors)\u001b[0m\n\u001b[1;32m    589\u001b[0m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    590\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array_safe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0merrors\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    592\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmaybe_coerce_values\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnew_values\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array_safe\u001b[0;34m(values, dtype, copy, errors)\u001b[0m\n\u001b[1;32m   1307\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1308\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1309\u001b[0;31m         \u001b[0mnew_values\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1310\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mValueError\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1311\u001b[0m         \u001b[0;31m# e.g. astype_nansafe can fail on object-dtype of strings\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_array\u001b[0;34m(values, dtype, copy)\u001b[0m\n\u001b[1;32m   1255\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1256\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1257\u001b[0;31m         \u001b[0mvalues\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mastype_nansafe\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalues\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1258\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1259\u001b[0m     \u001b[0;31m# in pandas we don't store numpy str dtypes, so convert to object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/dtypes/cast.py\u001b[0m in \u001b[0;36mastype_nansafe\u001b[0;34m(arr, dtype, copy, skipna)\u001b[0m\n\u001b[1;32m   1199\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcopy\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mis_object_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1200\u001b[0m         \u001b[0;31m# Explicit copy, or required since NumPy can't view from / to object.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1201\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1202\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1203\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0marr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: could not convert string to float: '#Value!'"]}]},{"cell_type":"code","source":["df['VLR_PRECO_LISTA'] = df['VLR_PRECO_LISTA'].str.replace(',', '.')"],"metadata":{"id":"buEEt_5t5JWw","executionInfo":{"status":"ok","timestamp":1665171766281,"user_tz":180,"elapsed":1,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":488},"id":"o9eSPkpY5JZH","executionInfo":{"status":"ok","timestamp":1665171786831,"user_tz":180,"elapsed":284,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}},"outputId":"219e592d-4fe8-42e8-9f8e-dbaaec05e3c5"},"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       VENDEDOR  CLIENTE  PRODUTO  QUANTIDADE UNIDADE_MEDIDA_NF   PREÇO_NF  \\\n","0           380    38797      254     30155.0               KGS     10,795   \n","1           379    36022      963     13149.0               KGS       5,78   \n","2           385    23397     1158      4602.0               KGS       11,3   \n","3           422    15430      112     13850.0               KGS      3,926   \n","4           380     6319       69      5347.0               KGS      44,39   \n","...         ...      ...      ...         ...               ...        ...   \n","16685       318    23353      256      1753.0               KGS  245,83806   \n","16686       318    23353      256      2103.0               KGS  218,57511   \n","16687       318    23353      256      2103.0               KGS  233,59089   \n","16688       318    23353      256      1753.0               KGS  257,11803   \n","16689       318    23353      256      1753.0               KGS  264,10605   \n","\n","         DATA_NF CRP_AJUSTADO VLR_PRECO_LISTA VLR_CONTRIBUICAO  \n","0      6/19/2010         5,29           12.88         166.092   \n","1      5/23/2010         3,32            6.06          32.362   \n","2       3/8/2010         7,87           14.40          15.771   \n","3      4/26/2010         3,91            7.15             197   \n","4      8/24/2009         4,11           10.01         215.380   \n","...          ...          ...             ...              ...  \n","16685   6/3/2010        50,27          168.77         342.834   \n","16686  10/2/2010        47,81          175.10         359.110   \n","16687   9/3/2010        55,75          187.16         373.993   \n","16688   7/2/2010        52,58          176.50         358.551   \n","16689   8/1/2010        54,01          181.31         368.304   \n","\n","[16690 rows x 10 columns]"],"text/html":["\n","  <div id=\"df-1e1576ca-1876-4fad-83a3-f2a40382212f\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>VENDEDOR</th>\n","      <th>CLIENTE</th>\n","      <th>PRODUTO</th>\n","      <th>QUANTIDADE</th>\n","      <th>UNIDADE_MEDIDA_NF</th>\n","      <th>PREÇO_NF</th>\n","      <th>DATA_NF</th>\n","      <th>CRP_AJUSTADO</th>\n","      <th>VLR_PRECO_LISTA</th>\n","      <th>VLR_CONTRIBUICAO</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>380</td>\n","      <td>38797</td>\n","      <td>254</td>\n","      <td>30155.0</td>\n","      <td>KGS</td>\n","      <td>10,795</td>\n","      <td>6/19/2010</td>\n","      <td>5,29</td>\n","      <td>12.88</td>\n","      <td>166.092</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>379</td>\n","      <td>36022</td>\n","      <td>963</td>\n","      <td>13149.0</td>\n","      <td>KGS</td>\n","      <td>5,78</td>\n","      <td>5/23/2010</td>\n","      <td>3,32</td>\n","      <td>6.06</td>\n","      <td>32.362</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>385</td>\n","      <td>23397</td>\n","      <td>1158</td>\n","      <td>4602.0</td>\n","      <td>KGS</td>\n","      <td>11,3</td>\n","      <td>3/8/2010</td>\n","      <td>7,87</td>\n","      <td>14.40</td>\n","      <td>15.771</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>422</td>\n","      <td>15430</td>\n","      <td>112</td>\n","      <td>13850.0</td>\n","      <td>KGS</td>\n","      <td>3,926</td>\n","      <td>4/26/2010</td>\n","      <td>3,91</td>\n","      <td>7.15</td>\n","      <td>197</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>380</td>\n","      <td>6319</td>\n","      <td>69</td>\n","      <td>5347.0</td>\n","      <td>KGS</td>\n","      <td>44,39</td>\n","      <td>8/24/2009</td>\n","      <td>4,11</td>\n","      <td>10.01</td>\n","      <td>215.380</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>16685</th>\n","      <td>318</td>\n","      <td>23353</td>\n","      <td>256</td>\n","      <td>1753.0</td>\n","      <td>KGS</td>\n","      <td>245,83806</td>\n","      <td>6/3/2010</td>\n","      <td>50,27</td>\n","      <td>168.77</td>\n","      <td>342.834</td>\n","    </tr>\n","    <tr>\n","      <th>16686</th>\n","      <td>318</td>\n","      <td>23353</td>\n","      <td>256</td>\n","      <td>2103.0</td>\n","      <td>KGS</td>\n","      <td>218,57511</td>\n","      <td>10/2/2010</td>\n","      <td>47,81</td>\n","      <td>175.10</td>\n","      <td>359.110</td>\n","    </tr>\n","    <tr>\n","      <th>16687</th>\n","      <td>318</td>\n","      <td>23353</td>\n","      <td>256</td>\n","      <td>2103.0</td>\n","      <td>KGS</td>\n","      <td>233,59089</td>\n","      <td>9/3/2010</td>\n","      <td>55,75</td>\n","      <td>187.16</td>\n","      <td>373.993</td>\n","    </tr>\n","    <tr>\n","      <th>16688</th>\n","      <td>318</td>\n","      <td>23353</td>\n","      <td>256</td>\n","      <td>1753.0</td>\n","      <td>KGS</td>\n","      <td>257,11803</td>\n","      <td>7/2/2010</td>\n","      <td>52,58</td>\n","      <td>176.50</td>\n","      <td>358.551</td>\n","    </tr>\n","    <tr>\n","      <th>16689</th>\n","      <td>318</td>\n","      <td>23353</td>\n","      <td>256</td>\n","      <td>1753.0</td>\n","      <td>KGS</td>\n","      <td>264,10605</td>\n","      <td>8/1/2010</td>\n","      <td>54,01</td>\n","      <td>181.31</td>\n","      <td>368.304</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>16690 rows × 10 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1e1576ca-1876-4fad-83a3-f2a40382212f')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1e1576ca-1876-4fad-83a3-f2a40382212f button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1e1576ca-1876-4fad-83a3-f2a40382212f');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":29}]},{"cell_type":"code","source":[],"metadata":{"id":"3eLe53065JbL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"r4KIQvP65Jdi"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"zsQDgaDZ5Jfn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"6kqhCzac5Jh-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"rIG0xbgI5JkN"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"mTrthQHg5JmQ"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"D3jruhDf5JoV"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":[],"metadata":{"id":"7ZU3cwX65Jv3"}},{"cell_type":"markdown","source":[],"metadata":{"id":"uMPqXS3e5J9p"}},{"cell_type":"markdown","source":[],"metadata":{"id":"FbcAhO_J5J_t"}},{"cell_type":"markdown","source":[],"metadata":{"id":"TPOjx6Kk5KB7"}},{"cell_type":"markdown","source":[],"metadata":{"id":"8y4jlrP65KEJ"}},{"cell_type":"markdown","source":[],"metadata":{"id":"dqGZiiZx5KGM"}},{"cell_type":"code","source":["series = pd.read_csv(file, parse_dates =['DATA_NF'],index_col=0, squeeze=True)\n"],"metadata":{"id":"SnY39mFw3sx8","executionInfo":{"status":"ok","timestamp":1665170090322,"user_tz":180,"elapsed":236,"user":{"displayName":"Hikaru Yamanaka","userId":"11118722350986459578"}}},"execution_count":3,"outputs":[]}]}